
import java.io.File;
import java.io.FileOutputStream;
import java.util.Calendar;
import java.util.Date;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.ss.util.CellReference;

public class PoiForExcel {

	public void fetch() {
		try {
			Workbook wb = WorkbookFactory.create(new File("MyExcel.xls"));
			DataFormatter formatter = new DataFormatter();
			Sheet sheet1 = wb.getSheetAt(0);
			for (Row row : sheet1) {
				for (Cell cell : row) {
					CellReference cellRef = new CellReference(row.getRowNum(), cell.getColumnIndex());
					System.out.print(cellRef.formatAsString());
					System.out.print(" - ");
					// get the text that appears in the cell by getting the cell value and applying
					// any data formats (Date, 0.00, 1.23e9, $1.23, etc)
					String text = formatter.formatCellValue(cell);
					System.out.println(text);

					// Alternatively, get the value and format it yourself
					switch (cell.getCellTypeEnum()) {
					case STRING:
						System.out.println(cell.getRichStringCellValue().getString());
						break;
					case NUMERIC:
						if (DateUtil.isCellDateFormatted(cell)) {
							System.out.println(cell.getDateCellValue());
						} else {
							System.out.println(cell.getNumericCellValue());
						}
						break;
					case BOOLEAN:
						System.out.println(cell.getBooleanCellValue());
						break;
					case FORMULA:
						System.out.println(cell.getCellFormula());
						break;
					case BLANK:
						System.out.println();
						break;
					default:
						System.out.println();
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void write() {
		try {
			Workbook wb = new HSSFWorkbook();
		    Sheet sheet = wb.createSheet("new sheet");
		    
		 // Create a row and put some cells in it. Rows are 0 based.
		    Row row1 = sheet.createRow((short) 1);

		    // Aqua background
		    CellStyle style = wb.createCellStyle();
		    style.setFillBackgroundColor(IndexedColors.AQUA.getIndex());
//		    style.setFillPattern(CellStyle.BIG_SPOTS);
		    Cell cell = row1.createCell((short) 1);
		    cell.setCellValue("X");
		    cell.setCellStyle(style);

		    // Orange "foreground", foreground being the fill foreground not the font color.
		    style = wb.createCellStyle();
		    style.setFillForegroundColor(IndexedColors.ORANGE.getIndex());
//		    style.setFillPattern(CellStyle.SOLID_FOREGROUND);
		    cell = row1.createCell((short) 2);
		    cell.setCellValue("X");
		    cell.setCellStyle(style);

		    
		    Row row2 = sheet.createRow((short)2);
		    row2.createCell(0).setCellValue(1.1);
		    row2.createCell(1).setCellValue(new Date());
		    row2.createCell(2).setCellValue(Calendar.getInstance());
		    row2.createCell(3).setCellValue("a string");
		    row2.createCell(4).setCellValue(true);
		    row2.createCell(5).setCellType(CellType.ERROR);

		    // Write the output to a file
		    FileOutputStream fileOut = new FileOutputStream("workbook.xls");
		    wb.write(fileOut);
		    fileOut.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
